// Generated by row_row_row tool
// Auto-generated file. Do not modify.
class TaskRow {
  static const table = 'task';

  static const field = (
    id: 'id',
    project: 'project',
    createdAt: 'created_at',
    createdBy: 'created_by',
    customerName: 'customer_name',
    assignee: 'assignee',
    customerNationality: 'customer_nationality',
    customerBirthday: 'customer_birthday',
    customerCountryResidence: 'customer_country_residence',
    customerPhone: 'customer_phone',
    customerGender: 'customer_gender',
    status: 'status',
    description: 'description',
    dateDue: 'date_due',
    form: 'form',
    title: 'title',
    asanaGid: 'asana_gid',
    sysCreatedAt: 'sys_created_at',
    rawDescription: 'raw_description',
    formProcessedOn: 'form_processed_on',
    attachmentProcessed: 'attachment_processed',
    lastStatusUpdate: 'last_status_update',
    subtaskProcessedOn: 'subtask_processed_on',
  );

  final String id;
  final String? project;
  final DateTime createdAt;
  final String? createdBy;
  final String? customerName;
  final String? assignee;
  final String? customerNationality;
  final DateTime? customerBirthday;
  final String? customerCountryResidence;
  final String? customerPhone;
  final String? customerGender;
  final String? status;
  final String? description;
  final DateTime? dateDue;
  final String? form;
  final String? title;
  final String? asanaGid;
  final DateTime sysCreatedAt;
  final String? rawDescription;
  final DateTime? formProcessedOn;
  final bool attachmentProcessed;
  final DateTime lastStatusUpdate;
  final DateTime? subtaskProcessedOn;

  const TaskRow({
    required this.id,
    this.project,
    required this.createdAt,
    this.createdBy,
    this.customerName,
    this.assignee,
    this.customerNationality,
    this.customerBirthday,
    this.customerCountryResidence,
    this.customerPhone,
    this.customerGender,
    this.status,
    this.description,
    this.dateDue,
    this.form,
    this.title,
    this.asanaGid,
    required this.sysCreatedAt,
    this.rawDescription,
    this.formProcessedOn,
    required this.attachmentProcessed,
    required this.lastStatusUpdate,
    this.subtaskProcessedOn,
  });

  factory TaskRow.fromJson(Map<String, dynamic> json) {
    return TaskRow(
      id: json[field.id] as String,
      project: json[field.project],
      createdAt: DateTime.parse(json[field.createdAt]),
      createdBy: json[field.createdBy],
      customerName: json[field.customerName],
      assignee: json[field.assignee],
      customerNationality: json[field.customerNationality],
      customerBirthday: json[field.customerBirthday] == null ? null : DateTime.tryParse(json[field.customerBirthday] ?? ''),
      customerCountryResidence: json[field.customerCountryResidence],
      customerPhone: json[field.customerPhone],
      customerGender: json[field.customerGender],
      status: json[field.status],
      description: json[field.description],
      dateDue: json[field.dateDue] == null ? null : DateTime.tryParse(json[field.dateDue] ?? ''),
      form: json[field.form],
      title: json[field.title],
      asanaGid: json[field.asanaGid],
      sysCreatedAt: DateTime.parse(json[field.sysCreatedAt]),
      rawDescription: json[field.rawDescription],
      formProcessedOn: json[field.formProcessedOn] == null ? null : DateTime.tryParse(json[field.formProcessedOn] ?? ''),
      attachmentProcessed: json[field.attachmentProcessed] as bool,
      lastStatusUpdate: DateTime.parse(json[field.lastStatusUpdate]),
      subtaskProcessedOn: json[field.subtaskProcessedOn] == null ? null : DateTime.tryParse(json[field.subtaskProcessedOn] ?? ''),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      field.id: id,
      field.project: project,
      field.createdAt: createdAt.toIso8601String(),
      field.createdBy: createdBy,
      field.customerName: customerName,
      field.assignee: assignee,
      field.customerNationality: customerNationality,
      field.customerBirthday: customerBirthday?.toIso8601String(),
      field.customerCountryResidence: customerCountryResidence,
      field.customerPhone: customerPhone,
      field.customerGender: customerGender,
      field.status: status,
      field.description: description,
      field.dateDue: dateDue?.toIso8601String(),
      field.form: form,
      field.title: title,
      field.asanaGid: asanaGid,
      field.sysCreatedAt: sysCreatedAt.toIso8601String(),
      field.rawDescription: rawDescription,
      field.formProcessedOn: formProcessedOn?.toIso8601String(),
      field.attachmentProcessed: attachmentProcessed,
      field.lastStatusUpdate: lastStatusUpdate.toIso8601String(),
      field.subtaskProcessedOn: subtaskProcessedOn?.toIso8601String(),
    };
  }

  TaskRow copyWith({
    String? id,
    String? project,
    DateTime? createdAt,
    String? createdBy,
    String? customerName,
    String? assignee,
    String? customerNationality,
    DateTime? customerBirthday,
    String? customerCountryResidence,
    String? customerPhone,
    String? customerGender,
    String? status,
    String? description,
    DateTime? dateDue,
    String? form,
    String? title,
    String? asanaGid,
    DateTime? sysCreatedAt,
    String? rawDescription,
    DateTime? formProcessedOn,
    bool? attachmentProcessed,
    DateTime? lastStatusUpdate,
    DateTime? subtaskProcessedOn,
  }) {
    return TaskRow(
      id: id ?? this.id,
      project: project ?? this.project,
      createdAt: createdAt ?? this.createdAt,
      createdBy: createdBy ?? this.createdBy,
      customerName: customerName ?? this.customerName,
      assignee: assignee ?? this.assignee,
      customerNationality: customerNationality ?? this.customerNationality,
      customerBirthday: customerBirthday ?? this.customerBirthday,
      customerCountryResidence: customerCountryResidence ?? this.customerCountryResidence,
      customerPhone: customerPhone ?? this.customerPhone,
      customerGender: customerGender ?? this.customerGender,
      status: status ?? this.status,
      description: description ?? this.description,
      dateDue: dateDue ?? this.dateDue,
      form: form ?? this.form,
      title: title ?? this.title,
      asanaGid: asanaGid ?? this.asanaGid,
      sysCreatedAt: sysCreatedAt ?? this.sysCreatedAt,
      rawDescription: rawDescription ?? this.rawDescription,
      formProcessedOn: formProcessedOn ?? this.formProcessedOn,
      attachmentProcessed: attachmentProcessed ?? this.attachmentProcessed,
      lastStatusUpdate: lastStatusUpdate ?? this.lastStatusUpdate,
      subtaskProcessedOn: subtaskProcessedOn ?? this.subtaskProcessedOn,
    );
  }
}
