// Generated by row_row_row tool
// Auto-generated file. Do not modify.
class ProjectRow {
  static const table = 'project';

  static const field = (
    id: 'id',
    title: 'title',
    createdBy: 'created_by',
    createdAt: 'created_at',
    status: 'status',
    isClinic: 'is_clinic',
    description: 'description',
    canChooseOtherClinic: 'can_choose_other_clinic',
    asanaProjectGid: 'asana_project_gid',
    pinOrder: 'pin_order',
    area: 'area',
  );

  final String id;
  final String? title;
  final String? createdBy;
  final DateTime createdAt;
  final String? status;
  final bool? isClinic;
  final String? description;
  final bool canChooseOtherClinic;
  final String? asanaProjectGid;
  final DateTime? pinOrder;
  final String? area;

  const ProjectRow({
    required this.id,
    this.title,
    this.createdBy,
    required this.createdAt,
    this.status,
    this.isClinic,
    this.description,
    required this.canChooseOtherClinic,
    this.asanaProjectGid,
    this.pinOrder,
    this.area,
  });

  factory ProjectRow.fromJson(Map<String, dynamic> json) {
    return ProjectRow(
      id: json[field.id] as String,
      title: json[field.title],
      createdBy: json[field.createdBy],
      createdAt: DateTime.parse(json[field.createdAt]),
      status: json[field.status],
      isClinic: json[field.isClinic],
      description: json[field.description],
      canChooseOtherClinic: json[field.canChooseOtherClinic] as bool,
      asanaProjectGid: json[field.asanaProjectGid],
      pinOrder: json[field.pinOrder] == null ? null : DateTime.tryParse(json[field.pinOrder] ?? ''),
      area: json[field.area],
    );
  }
  Map<String, dynamic> toJson() {
    return {
      field.id: id,
      field.title: title,
      field.createdBy: createdBy,
      field.createdAt: createdAt.toIso8601String(),
      field.status: status,
      field.isClinic: isClinic,
      field.description: description,
      field.canChooseOtherClinic: canChooseOtherClinic,
      field.asanaProjectGid: asanaProjectGid,
      field.pinOrder: pinOrder?.toIso8601String(),
      field.area: area,
    };
  }

  ProjectRow copyWith({
    String? id,
    String? title,
    String? createdBy,
    DateTime? createdAt,
    String? status,
    bool? isClinic,
    String? description,
    bool? canChooseOtherClinic,
    String? asanaProjectGid,
    DateTime? pinOrder,
    String? area,
  }) {
    return ProjectRow(
      id: id ?? this.id,
      title: title ?? this.title,
      createdBy: createdBy ?? this.createdBy,
      createdAt: createdAt ?? this.createdAt,
      status: status ?? this.status,
      isClinic: isClinic ?? this.isClinic,
      description: description ?? this.description,
      canChooseOtherClinic: canChooseOtherClinic ?? this.canChooseOtherClinic,
      asanaProjectGid: asanaProjectGid ?? this.asanaProjectGid,
      pinOrder: pinOrder ?? this.pinOrder,
      area: area ?? this.area,
    );
  }
}
