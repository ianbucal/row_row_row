// Generated by row_row_row tool
// Auto-generated file. Do not modify.
class ProcedureWithCategoryClinicAreaNamesRow {
  static const table = 'procedure_with_category_clinic_area_names';

  static const field = (
    id: 'id',
    titleEng: 'title_eng',
    titleKor: 'title_kor',
    createdAt: 'created_at',
    commission: 'commission',
    totalPrice: 'total_price',
    category: 'category',
    categoryName: 'category_name',
    description: 'description',
    explanation: 'explanation',
    clinicId: 'clinic_id',
    clinicName: 'clinic_name',
    clinicAreaId: 'clinic_area_id',
    clinicAreaName: 'clinic_area_name',
  );

  final String? id;
  final String? titleEng;
  final String? titleKor;
  final DateTime? createdAt;
  final double? commission;
  final double? totalPrice;
  final String? category;
  final String? categoryName;
  final String? description;
  final String? explanation;
  final String? clinicId;
  final String? clinicName;
  final String? clinicAreaId;
  final String? clinicAreaName;

  const ProcedureWithCategoryClinicAreaNamesRow({
    this.id,
    this.titleEng,
    this.titleKor,
    this.createdAt,
    this.commission,
    this.totalPrice,
    this.category,
    this.categoryName,
    this.description,
    this.explanation,
    this.clinicId,
    this.clinicName,
    this.clinicAreaId,
    this.clinicAreaName,
  });

  factory ProcedureWithCategoryClinicAreaNamesRow.fromJson(Map<String, dynamic> json) {
    return ProcedureWithCategoryClinicAreaNamesRow(
      id: json[field.id],
      titleEng: json[field.titleEng],
      titleKor: json[field.titleKor],
      createdAt: json[field.createdAt] == null ? null : DateTime.tryParse(json[field.createdAt] ?? ''),
      commission: json[field.commission] == null ? null : (json[field.commission] as num?)?.toDouble(),
      totalPrice: json[field.totalPrice] == null ? null : (json[field.totalPrice] as num?)?.toDouble(),
      category: json[field.category],
      categoryName: json[field.categoryName],
      description: json[field.description],
      explanation: json[field.explanation],
      clinicId: json[field.clinicId],
      clinicName: json[field.clinicName],
      clinicAreaId: json[field.clinicAreaId],
      clinicAreaName: json[field.clinicAreaName],
    );
  }
  Map<String, dynamic> toJson() {
    return {
      field.id: id,
      field.titleEng: titleEng,
      field.titleKor: titleKor,
      field.createdAt: createdAt?.toIso8601String(),
      field.commission: commission,
      field.totalPrice: totalPrice,
      field.category: category,
      field.categoryName: categoryName,
      field.description: description,
      field.explanation: explanation,
      field.clinicId: clinicId,
      field.clinicName: clinicName,
      field.clinicAreaId: clinicAreaId,
      field.clinicAreaName: clinicAreaName,
    };
  }

  ProcedureWithCategoryClinicAreaNamesRow copyWith({
    String? id,
    String? titleEng,
    String? titleKor,
    DateTime? createdAt,
    double? commission,
    double? totalPrice,
    String? category,
    String? categoryName,
    String? description,
    String? explanation,
    String? clinicId,
    String? clinicName,
    String? clinicAreaId,
    String? clinicAreaName,
  }) {
    return ProcedureWithCategoryClinicAreaNamesRow(
      id: id ?? this.id,
      titleEng: titleEng ?? this.titleEng,
      titleKor: titleKor ?? this.titleKor,
      createdAt: createdAt ?? this.createdAt,
      commission: commission ?? this.commission,
      totalPrice: totalPrice ?? this.totalPrice,
      category: category ?? this.category,
      categoryName: categoryName ?? this.categoryName,
      description: description ?? this.description,
      explanation: explanation ?? this.explanation,
      clinicId: clinicId ?? this.clinicId,
      clinicName: clinicName ?? this.clinicName,
      clinicAreaId: clinicAreaId ?? this.clinicAreaId,
      clinicAreaName: clinicAreaName ?? this.clinicAreaName,
    );
  }
}
