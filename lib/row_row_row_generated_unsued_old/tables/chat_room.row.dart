// Generated by row_row_row tool
// Auto-generated file. Do not modify.
class ChatRoomRow {
  static const table = 'chat_room';

  static const field = (
    id: 'id',
    name: 'name',
    createdBy: 'created_by',
    lastMessageAt: 'last_message_at',
    isActive: 'is_active',
    createdAt: 'created_at',
    lastMessage: 'last_message',
    photo: 'photo',
    projectClinicRel: 'project_clinic_rel',
    isApproved: 'is_approved',
    singleChatFor: 'single_chat_for',
  );

  final String id;
  final String? name;
  final String? createdBy;
  final DateTime? lastMessageAt;
  final bool? isActive;
  final DateTime createdAt;
  final String? lastMessage;
  final String? photo;
  final String? projectClinicRel;
  final bool? isApproved;
  final List<String>? singleChatFor;

  const ChatRoomRow({
    required this.id,
    this.name,
    this.createdBy,
    this.lastMessageAt,
    this.isActive,
    required this.createdAt,
    this.lastMessage,
    this.photo,
    this.projectClinicRel,
    this.isApproved,
    this.singleChatFor,
  });

  factory ChatRoomRow.fromJson(Map<String, dynamic> json) {
    return ChatRoomRow(
      id: json[field.id] as String,
      name: json[field.name],
      createdBy: json[field.createdBy],
      lastMessageAt: json[field.lastMessageAt] == null ? null : DateTime.tryParse(json[field.lastMessageAt] ?? ''),
      isActive: json[field.isActive],
      createdAt: DateTime.parse(json[field.createdAt]),
      lastMessage: json[field.lastMessage],
      photo: json[field.photo],
      projectClinicRel: json[field.projectClinicRel],
      isApproved: json[field.isApproved],
      singleChatFor: json[field.singleChatFor] == null ? null : List<String>.from(json[field.singleChatFor]),
    );
  }
  Map<String, dynamic> toJson() {
    return {
      field.id: id,
      field.name: name,
      field.createdBy: createdBy,
      field.lastMessageAt: lastMessageAt?.toIso8601String(),
      field.isActive: isActive,
      field.createdAt: createdAt.toIso8601String(),
      field.lastMessage: lastMessage,
      field.photo: photo,
      field.projectClinicRel: projectClinicRel,
      field.isApproved: isApproved,
      field.singleChatFor: singleChatFor,
    };
  }

  ChatRoomRow copyWith({
    String? id,
    String? name,
    String? createdBy,
    DateTime? lastMessageAt,
    bool? isActive,
    DateTime? createdAt,
    String? lastMessage,
    String? photo,
    String? projectClinicRel,
    bool? isApproved,
    List<String>? singleChatFor,
  }) {
    return ChatRoomRow(
      id: id ?? this.id,
      name: name ?? this.name,
      createdBy: createdBy ?? this.createdBy,
      lastMessageAt: lastMessageAt ?? this.lastMessageAt,
      isActive: isActive ?? this.isActive,
      createdAt: createdAt ?? this.createdAt,
      lastMessage: lastMessage ?? this.lastMessage,
      photo: photo ?? this.photo,
      projectClinicRel: projectClinicRel ?? this.projectClinicRel,
      isApproved: isApproved ?? this.isApproved,
      singleChatFor: singleChatFor ?? this.singleChatFor,
    );
  }
}
